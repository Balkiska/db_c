### To-Do List pour le projet en C

- [ ] **Étape 1 : Préparation de l'environnement** (Deadline : 14-15 octobre)
  - [x] Télécharger le projet depuis le dépôt GitHub.(10-15 minutes)
  - [ ] Configurer l'environnement et vérifier la version du compilateur.(20-30 minutes)
  - [ ] Créer un fichier Makefile pour automatiser la compilation du projet.(1 heure)

- [ ] **Étape 2 : Créer un Makefile** (Deadline : 17 octobre)
  - [ ] Définir les règles pour compiler les fichiers et créer l'exécutable. (1 heure)
  - [ ] Ajouter les options de compilateur pour gérer les erreurs et les messages d'avertissement. (1 heure)
  - [ ] Tester la commande `make` pour vérifier le bon fonctionnement du Makefile. (1 heure)

- [ ] **Étape 3 : Créer les structures de données** (Deadline : 23 octobre)
  - [ ] Créer une structure pour représenter une table (colonnes et données). (2 heures)
  - [ ] Créer une structure pour représenter une ligne dans une table. (2 heures)
  - [ ] Créer une fonction pour initialiser une table avec des colonnes et des lignes. (2 heures)

- [ ] **Étape 4 : Implémenter les commandes SQL de base** (Deadline : 30 octobre)
  - [ ] Implémenter la fonction `select` pour récupérer des données d'une table. (3 heures)
  - [ ] Implémenter la fonction `insert` pour ajouter une nouvelle ligne dans la table. (3 heures)
  - [ ] Tester les fonctions `select` et `insert` avec des assertions pour valider leur bon fonctionnement. (2 heures)

- [ ] **Étape 5 : Persistance des données avec un arbre binaire** (Deadline : 6 novembre)
  - [ ] Implémenter un arbre binaire pour stocker les données. (4 heures)
  - [ ] Implémenter des fonctions pour insérer, rechercher, équilibrer et supprimer des données dans l'arbre.(4 heures)
  - [ ] Implémenter la persistance des données sur disque via un fichier binaire. (2 heures)

- [ ] **Étape 6 : Tester et valider le projet** (Deadline : 13 novembre)
  - [ ] Créer plusieurs tests pour valider les fonctionnalités du projet. (3 heure)
  - [ ] Utiliser Valgrind pour détecter les fuites de mémoire et tester la robustesse du code. (2 heures)
  - [ ] Explorer l'utilisation de fuzzers pour tester la robustesse des entrées du programme. (2 heures)

- [ ] **Étape 7 : Finaliser et optimiser le projet** (Deadline : 16 novembre)
  - [ ] Rédiger une documentation pour expliquer les fonctions et l'architecture du projet. (2 heures)
  - [ ] Vérifier et optimiser la qualité du code avec des outils de test et de validation. (2 heures)
  - [ ] Se préparer à justifier les choix de conception, d'architecture et de compilation lors de l'examen. (1 heure)

**Date de rendu finale : 17 novembre** - Total estimé : 41 heures
