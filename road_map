### To-Do List pour le projet en C

- [x] **Étape 1 : Préparation de l'environnement**
  - [x] Créer un fichier Makefile pour automatiser la compilation du projet.

- [ ] **Étape 2 : Organisation du Code**
  - [ ] Diviser le projet en plusieurs fichiers `.c` et `.h` pour éviter un fichier monolithique.
  - [ ] Documenter chaque fichier et fonction pour la maintenance future.

- [ ] **Étape 3 : Structuration des Données**
  - [ ] Définir la structure `Table` et `Row` dans un fichier `.h`.
  - [ ] Structurer les lignes de la table, et si nécessaire, ajouter des données test pour éviter d’utiliser l’entrée utilisateur dans un premier temps.

- [ ] **Étape 4 : Implémentation des Commandes SQL** 
  - [ ] Implémenter la commande `select` pour récupérer les données.
  - [ ] Implémenter la commande `insert` pour ajouter de nouvelles données.

- [ ] **Étape 5 : Test et Vérification de Fonctionnalités**
  - [ ] Écrire des tests avec `assert` pour vérifier le bon fonctionnement des commandes SQL (ex. `select` et `insert`).
  - [ ] Garder une trace de l’état actuel de la base de données (pointeur ou indicateur).

- [ ] **Étape 6 : Gestion des Données en Arbre Binaire**
  - [ ] Implémenter les structures et algorithmes pour un arbre binaire équilibré.
  - [ ] Développer les opérations de recherche, d'insertion, et de suppression sur l'arbre.
  - [ ] Vérifier que les données sont stockées dans l'arbre binaire.

- [ ] **Étape 7 : Persistance des Données sur Disque**
  - [ ] Enregistrer les données de l’arbre binaire sur le disque.
  - [ ] Vérifier la lecture/écriture des données pour assurer la persistance.

- [ ] **Étape 8 : Qualité du Code et Audit** (Bonus)
  - [ ] Utiliser des outils comme `valgrind` et des fuzzers (ex. AFL++) pour détecter et corriger les bugs.
  - [ ] Ajouter des “sanitizers” pour les tests, et documenter les bugs trouvés et corrigés.
